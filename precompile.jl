precompile(Tuple{typeof(Base.setindex!), Base.EnvDict, Bool, String})
precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{Type{NamedTuple{(:stderr, :stdout), T} where T<:Tuple}, Tuple{Base.TTY, Base.TTY}})
precompile(Tuple{Base.var"#pipeline##kw", NamedTuple{(:stderr, :stdout), Tuple{Base.TTY, Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Infinity.__init__)})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(TimeZones.TZData.__init__)})
precompile(Tuple{typeof(Base.:(-)), Int32})
precompile(Tuple{Type{Base.UUID}, Nothing})
precompile(Tuple{typeof(Scratch.get_scratch!), Base.UUID, String, Base.UUID})
precompile(Tuple{typeof(Base.Filesystem.abspath), String, String, Vararg{String}})
precompile(Tuple{typeof(TimeZones.__init__)})
precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String, Vararg{AbstractString}})
precompile(Tuple{Type{Dates.DatePart{Char(0x7a000000)}}, Int64, Bool})
precompile(Tuple{Type{Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.ssszzz"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.DatePart{Char(0x7a000000)}}}}, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.DatePart{Char(0x7a000000)}}, Dates.DateLocale})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.foreach), typeof(Base.invokelatest), Array{Function, 1}})
precompile(Tuple{Infinity.var"#1#4"})
precompile(Tuple{typeof(Requires.withpath), Any, String})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.something), String, String, Vararg{String}})
precompile(Tuple{Infinity.var"#2#5"})
precompile(Tuple{typeof(Requires.err), Any, Module, String, String, Any})
precompile(Tuple{Infinity.var"#3#6"})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Requires._include_path), String})
precompile(Tuple{typeof(Base.source_path), Nothing})
precompile(Tuple{typeof(Infinity.include), String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Symbol}, Symbol})
precompile(Tuple{typeof(Base.delete!), Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(Requires.withnotifications), Any, Vararg{Any}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}, Int64})
precompile(Tuple{typeof(Memento.__init__)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Int64}, String})
precompile(Tuple{typeof(Base.grow_to!), Array{Pair{Symbol, Bool}, 1}, Base.Generator{Base.RegexMatchIterator, Memento.var"#16#18"}})
precompile(Tuple{typeof(Base.rstrip), Base.Fix2{typeof(Base.in), Tuple{Char, Char}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.lstrip), Base.Fix2{typeof(Base.in), Tuple{Char, Char}}, Base.SubString{String}})
precompile(Tuple{Type{Memento.DefaultHandler{F, O} where O<:IO where F}, Base.TTY, Memento.DefaultFormatter, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{AbstractString, Symbol}}, Pair{String, Symbol}, Vararg{Pair{String, Symbol}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Memento.Handler{F} where F<:Memento.Formatter}, Memento.DefaultHandler{Memento.DefaultFormatter, Base.TTY}, String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{AbstractString, Memento.Logger}, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Memento.Logger})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Memento.Logger})
precompile(Tuple{Type{Memento.DefaultRecord}, String, String, Int64, String})
precompile(Tuple{typeof(Base.log), Memento.Logger, Memento.DefaultRecord})
precompile(Tuple{typeof(Base.close), Base.IOStream})
precompile(Tuple{typeof(Memento.getpath), Memento.Logger})
precompile(Tuple{typeof(Base.split), String, Char})
precompile(Tuple{typeof(Base.all), Function, Array{Memento.Filter, 1}})
precompile(Tuple{typeof(Base._all), Memento.var"#47#48"{Memento.DefaultRecord}, Array{Memento.Filter, 1}, Base.Colon})
precompile(Tuple{Memento.var"#35#36"{Memento.Logger}, Memento.DefaultRecord})
precompile(Tuple{Memento.var"#level_filter#38"{Memento.Logger}, Memento.DefaultRecord})
precompile(Tuple{typeof(Base.get), Memento.Attribute{String}})
precompile(Tuple{Memento.var"#4#5"{String}})
precompile(Tuple{Type{Base.Some{String}}, String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{AbstractString, Int64}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Int64}, String})
precompile(Tuple{Memento.var"#77#83"})
precompile(Tuple{Memento.var"#78#84"})
precompile(Tuple{Memento.var"#79#85"})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Memento.include), String})
precompile(Tuple{typeof(Base.include), Module, String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Symbol}})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.find_artifact_dir)})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(Base.is_root_module), Module})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Kerberos_krb5_jll.__init__)})
precompile(Tuple{typeof(Kerberos_krb5_jll.find_artifact_dir)})
precompile(Tuple{typeof(LibPQ_jll.__init__)})
precompile(Tuple{typeof(LibPQ_jll.find_artifact_dir)})
precompile(Tuple{typeof(LibPQ.__init__)})
precompile(Tuple{typeof(Base.string), String, Symbol, String, String, Vararg{Union{Char, Base.SubString{String}, String, Symbol}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Memento.Logger}, Memento.Logger, String})
precompile(Tuple{typeof(PyCall._set_finalized)})
precompile(Tuple{typeof(PyCall.pyjlwrap_dealloc), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_repr), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash32), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_call), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getattr), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getiter), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.__init__)})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Base.Timer}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}})
precompile(Tuple{typeof(Base.empty!), Base.IdDict{DataType, Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyObject}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyexc_initialize)})
precompile(Tuple{typeof(Base._append!), Array{PyCall.PyMemberDef, 1}, Base.HasLength, Tuple{PyCall.PyMemberDef, PyCall.PyMemberDef}})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyError, Symbol})
precompile(Tuple{typeof(Base.unsafe_load), Ptr{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.pyisinstance), PyCall.PyObject, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.escape_string), String})
precompile(Tuple{typeof(PyCall.pyerror), String, PyCall.PyError})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyBuffer})
precompile(Tuple{typeof(Base.get!), PyCall.var"#115#116"{Module}, Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Module})
precompile(Tuple{typeof(InvertedIndex.__init__)})
precompile(Tuple{Type{NamedTuple{(:prog, :description, :epilog, :autofix_names), T} where T<:Tuple}, Tuple{String, String, String, Bool}})
precompile(Tuple{Type{NamedTuple{(:prog, :description, :epilog, :autofix_names), Tuple{String, String, String, Bool}}}, Tuple{String, String, String, Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:prog, :description, :epilog, :autofix_names), Tuple{String, String, String, Bool}}, Symbol})
precompile(Tuple{typeof(Base._compute_eltype), Any})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Any, Nothing}, Any, Any})
precompile(Tuple{typeof(Base.afoldl), Base.var"#49#50", Type, Type})
precompile(Tuple{Type{Base.RefValue{Any}}, Type})
precompile(Tuple{typeof(Base.promote_typejoin), Any, Any})
precompile(Tuple{typeof(Base.afoldl), Base.var"#49#50", Type, Type, Type})
precompile(Tuple{Type{NamedTuple{(:as_symbols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{UInt8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{LibPQ.ConninfoDisplay}, LibPQ.ConninfoDisplay})
precompile(Tuple{typeof(Base.:(!=)), LibPQ.libpq_c.PostgresPollingStatusType, LibPQ.libpq_c.PostgresPollingStatusType})
precompile(Tuple{typeof(Base.:(==)), LibPQ.libpq_c.PostgresPollingStatusType, LibPQ.libpq_c.PostgresPollingStatusType})
precompile(Tuple{Type{NamedTuple{(:writable, :readable), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:writable, :readable), Tuple{Bool, Bool}}, Symbol})
precompile(Tuple{Type{LibPQ.Errors.JLConnectionError}, String})
precompile(Tuple{Type{NamedTuple{(:binary_format,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:binary_format,), Tuple{Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.HasShape{1}, 1}}})
precompile(Tuple{typeof(Base.cconvert), Type, LibPQ.libpq_c.PGVerbosity})
precompile(Tuple{typeof(Base.convert), Type{LibPQ.libpq_c.PGVerbosity}, LibPQ.libpq_c.PGVerbosity})
precompile(Tuple{typeof(Base.cconvert), Type, LibPQ.libpq_c.PGContextVisibility})
precompile(Tuple{typeof(Base.convert), Type{LibPQ.libpq_c.PGContextVisibility}, LibPQ.libpq_c.PGContextVisibility})
precompile(Tuple{typeof(Base.unsafe_convert), Type{LibPQ.libpq_c.PGVerbosity}, LibPQ.libpq_c.PGVerbosity})
precompile(Tuple{typeof(Base.unsafe_convert), Type{LibPQ.libpq_c.PGContextVisibility}, LibPQ.libpq_c.PGContextVisibility})
precompile(Tuple{Type{LibPQ.Errors.JLResultError}, String})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:binary_format,), Tuple{Bool}}, Symbol})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Base.Iterators.Enumerate{Array{UInt32, 1}}}}, Int64})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{UInt32, 1}, Array{Type, 1}}}, Int64})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:copycols,), Tuple{Nothing}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:copycols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:copycols,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(DataAPI.metadatasupport), Type})
precompile(Tuple{typeof(DataAPI.colmetadatasupport), Type})
precompile(Tuple{typeof(Base.:(<)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(>)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(!=)), UInt32, UInt32})
precompile(Tuple{typeof(Base.rem), UInt16, Type{UInt32}})
precompile(Tuple{Type{Base.CanonicalIndexError}, String, Any})
precompile(Tuple{Type{NamedTuple{(:copycols, :keeprows, :renamecols), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:copycols, :keeprows, :renamecols), Tuple{Bool, Bool, Bool}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Tuple, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:lt,), Tuple{typeof(Base.:(<=))}}, Symbol})
precompile(Tuple{Type{Base.Order.Lt{Base.Order.var"#1#3"{typeof(Base.:(<=)), typeof(Base.identity)}}}, Function})
precompile(Tuple{typeof(PyCall.pyany_toany), Type})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.Order.Ordering, 1}}})
precompile(Tuple{Type{NamedTuple{(:error,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:error,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Base.Enums.namemap), Type{LibPQ.libpq_c.ExecStatusType}})
precompile(Tuple{typeof(Core.Compiler.iterate), NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(DimensionalData.Dimensions.LookupArrays.unwrap), Type})
precompile(Tuple{typeof(DimensionalData.Dimensions.LookupArrays.transformdim), Type})
precompile(Tuple{DimensionalData.Dimensions.LookupArrays.var"##s36#47", Any, Any, Any})
precompile(Tuple{typeof(Base.parentmodule), DataType})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{typeof(Base.argtail), DimensionalData.Dimensions.Y{Base.Colon}})
precompile(Tuple{typeof(Base.cconvert), Type, Float64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Float64}, Float64})
precompile(Tuple{typeof(InvertedIndex.julia_main)})
precompile(Tuple{ArgParse.var"#ArgParseSettings#5#6", AbstractString, AbstractString, AbstractString, AbstractString, AbstractString, Bool, Bool, Any, Bool, Bool, Bool, Bool, Bool, Function, Bool, Bool, Bool, Type{ArgParse.ArgParseSettings}})
precompile(Tuple{typeof(ArgParse.check_prefix_chars), Any})
precompile(Tuple{Type{Base.Set{Char}}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Char}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{Char}}, Base.Set{Char}})
precompile(Tuple{typeof(Base.copy), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseGroup, 1}}, Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{ArgParse.ArgParseTable}})
precompile(Tuple{typeof(Base.getindex), Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseField, 1}}, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{AbstractString, Any}}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseTable}, ArgParse.ArgParseTable})
precompile(Tuple{typeof(Base.convert), Type{Function}, typeof(ArgParse.default_handler)})
precompile(Tuple{Type{NamedTuple{(:help, :action), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{ArgParse.var"#add_arg_field!##kw", Any, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{ArgParse.var"##add_arg_field!#23", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(ArgParse.check_name_format), Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#24#26", Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}, Base.Generator{Base.Dict{Symbol, Any}, ArgParse.var"#24#26"}})
precompile(Tuple{ArgParse.var"#24#26", Any})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{Type{ArgParse.ArgConsumerType}})
precompile(Tuple{Type{ArgParse.ArgConsumerType}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Union{Int64, Symbol}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseSettings, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{typeof(ArgParse.check_type), Any, Type, AbstractString})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(ArgParse.check_action_is_valid), Symbol})
precompile(Tuple{typeof(ArgParse.check_nargs_and_action), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(ArgParse.is_flag_action), Symbol})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Int64})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(ArgParse.is_command_action), Symbol})
precompile(Tuple{Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Array{AbstractString, 1}}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.convert), Type{Type}, Type})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgConsumerType}, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.convert), Type{Function}, ArgParse.var"#3#4"})
precompile(Tuple{typeof(Base.convert), Type{Union{AbstractString, Array{var"#s4", 1} where var"#s4"<:AbstractString}}, String})
precompile(Tuple{typeof(ArgParse.name_to_fieldnames!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.foreach), ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Array{String, 1}})
precompile(Tuple{ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Any})
precompile(Tuple{ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Any, Any})
precompile(Tuple{ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Any})
precompile(Tuple{typeof(Base.replace), String, Pair{Char, Char}})
precompile(Tuple{typeof(ArgParse.check_long_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(ArgParse.check_short_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{AbstractString, 1}})
precompile(Tuple{typeof(ArgParse.auto_dest_name), AbstractString, Array{AbstractString, 1}, Array{AbstractString, 1}, Bool})
precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 1}, Int64})
precompile(Tuple{ArgParse.var"#r#20"{Bool}, Any})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(ArgParse.get_group), AbstractString, ArgParse.ArgParseField, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.is_cmd), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseField, Symbol})
precompile(Tuple{typeof(ArgParse.is_arg), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseGroup, Symbol})
precompile(Tuple{typeof(Base.push!), Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(ArgParse.warn_extra_opts), Any, Array{Symbol, 1}})
precompile(Tuple{typeof(ArgParse.check_dest_name), AbstractString})
precompile(Tuple{ArgParse.var"#set_if_valid#28"{Array{Symbol, 1}, ArgParse.ArgParseField}, Any, Any})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Type})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Bool})
precompile(Tuple{typeof(ArgParse.check_arg_makes_sense), ArgParse.ArgParseSettings, ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.check_conflicts_with_commands), ArgParse.ArgParseSettings, ArgParse.ArgParseField, Bool})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseTable, Symbol})
precompile(Tuple{typeof(Base.keys), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(ArgParse.check_for_duplicates), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.push!), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help), Tuple{String, String}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:default, :help), Tuple{String, String}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help), Tuple{String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:default, :help), Tuple{String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:default, :help), Tuple{String, String}}}})
precompile(Tuple{typeof(ArgParse.default_action), ArgParse.ArgConsumerType})
precompile(Tuple{typeof(ArgParse.default_action), Symbol})
precompile(Tuple{typeof(Base.append!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.deepcopy), String})
precompile(Tuple{typeof(ArgParse.auto_metavar), AbstractString, Bool})
precompile(Tuple{typeof(Base.Unicode.uppercase), String})
precompile(Tuple{typeof(ArgParse.check_metavar), AbstractString})
precompile(Tuple{typeof(ArgParse.is_multi_action), Symbol})
precompile(Tuple{typeof(ArgParse.is_multi_nargs), ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{typeof(ArgParse.check_default_type), String, Type})
precompile(Tuple{typeof(ArgParse.check_range_default), Any, Function})
precompile(Tuple{ArgParse.var"#25#27", Any})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, String}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Int64}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{Int64, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Int64})
precompile(Tuple{typeof(ArgParse.check_default_type), Int64, Type})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{Symbol, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{Symbol, String, DataType}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:default, :help, :arg_type), Tuple{Symbol, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{Symbol, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Symbol, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Symbol, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Symbol})
precompile(Tuple{typeof(ArgParse.check_default_type), Symbol, Type})
precompile(Tuple{ArgParse.var"#parse_args##kw", Any, typeof(ArgParse.parse_args), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:as_symbols,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:as_symbols,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:as_symbols,), Tuple{Bool}}, Type{NamedTuple{(:as_symbols,), T} where T<:Tuple}})
precompile(Tuple{ArgParse.var"##parse_args#61", Bool, typeof(ArgParse.parse_args), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.check_settings_can_use_symbols), ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.isempty), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(ArgParse.parse_args_unhandled), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_args_unhandled), Array{T, 1} where T, ArgParse.ArgParseSettings, Bool})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#68#70", Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(Base.isempty), Base.Set{Char}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Bool})
precompile(Tuple{Type{NamedTuple{(:action, :help, :group), T} where T<:Tuple}, Tuple{Symbol, String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{ArgParse.ParserState}, Array{T, 1} where T, ArgParse.ArgParseSettings, Bool})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#62#64", Base.Iterators.Filter{ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#62#64"}})
precompile(Tuple{ArgParse.var"#63#65", Any})
precompile(Tuple{typeof(Base.deepcopy), Bool})
precompile(Tuple{typeof(Base.deepcopy), Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, AbstractString}}, Nothing})
precompile(Tuple{Type{Base.Set{AbstractString}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{AbstractString}}, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Dict{ArgParse.ArgParseGroup, AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{Type{NamedTuple{(:taskref, :spawn), T} where T<:Tuple}, Tuple{Nothing, Bool}})
precompile(Tuple{Type{Base.Channel{T} where T}, Function})
precompile(Tuple{Base.var"##_#590", Nothing, Bool, Type{Base.Channel{Any}}, ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Int64})
precompile(Tuple{Base.var"#591#592"{ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Any})
precompile(Tuple{typeof(ArgParse.preparse!), Base.Channel{T} where T, ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ParserState, Symbol})
precompile(Tuple{typeof(Base.task_done_hook), Task})
precompile(Tuple{typeof(Base.iterate), Base.Channel{Any}})
precompile(Tuple{Base.var"#595#596"{Base.Channel{Any}, Task}})
precompile(Tuple{typeof(ArgParse.test_required_args), ArgParse.ArgParseSettings, Base.Set{AbstractString}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#36#40", Base.Iterators.Filter{ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, Bool}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#36#40"}})
precompile(Tuple{ArgParse.var"#37#41", Any})
precompile(Tuple{typeof(ArgParse.idstring), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}})
precompile(Tuple{typeof(ArgParse.found_command), ArgParse.ParserState})
precompile(Tuple{typeof(ArgParse.has_cmd), ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base._any), typeof(ArgParse.is_cmd), Array{ArgParse.ArgParseField, 1}, Base.Colon})
precompile(Tuple{typeof(Base.pop!), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(ArgParse.convert_to_symbols), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{Type{NamedTuple{(:args,), T} where T<:Tuple}, Tuple{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type, Type, Type})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(:args,), Tuple{Base.Dict{Symbol, Any}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.uv_return_spawn), Ptr{Nothing}, Int64, Int32})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Base.Dict{Symbol, Any}, Tuple{Symbol}, NamedTuple{(:args,), Tuple{Base.Dict{Symbol, Any}}}}})
precompile(Tuple{typeof(Logging.showvalue), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context, :sizehint), Tuple{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64}}, typeof(Base.sprint), Function, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context, :sizehint), Tuple{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64}}, typeof(Base.sprint), Function, Symbol})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context, :sizehint), Tuple{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64}}, typeof(Base.sprint), Function, Bool})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context, :sizehint), Tuple{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64}}, typeof(Base.sprint), Function, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Base.Dict{Symbol, Any}, Tuple{Symbol}, NamedTuple{(:args,), Tuple{Base.Dict{Symbol, Any}}}}, Int64})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any})
precompile(Tuple{Base.var"##printstyled#917", Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.uv_writecb_task), Ptr{Nothing}, Int32})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.uv_timercb), Ptr{Nothing}})
precompile(Tuple{typeof(InvertedIndex.connect), String, String, String, Int64, String})
precompile(Tuple{Type{LibPQ.ConnectionOption}, String, String, Base.Missing, Base.Missing, String, LibPQ.ConninfoDisplay, Int32})
precompile(Tuple{Type{LibPQ.ConnectionOption}, String, String, Base.Missing, String, String, LibPQ.ConninfoDisplay, Int32})
precompile(Tuple{Type{LibPQ.ConnectionOption}, String, String, String, Base.Missing, String, LibPQ.ConninfoDisplay, Int32})
precompile(Tuple{Type{LibPQ.ConnectionOption}, String, String, String, String, String, LibPQ.ConninfoDisplay, Int32})
precompile(Tuple{Type{LibPQ.ConnectionOption}, String, Base.Missing, Base.Missing, Base.Missing, String, LibPQ.ConninfoDisplay, Int32})
precompile(Tuple{Type{NamedTuple{(:overlap,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:overlap,), Tuple{Bool}}, Symbol})
precompile(Tuple{Type{TimeZones.Class}, UInt8})
precompile(Tuple{typeof(Base.:(|)), TimeZones.Class, TimeZones.Class})
precompile(Tuple{typeof(TimeZones._tz_cache_length_assert)})
precompile(Tuple{typeof(Base.max), UInt8, UInt8})
precompile(Tuple{typeof(Base.:(<<)), Int16, Int64})
precompile(Tuple{typeof(Base.:(+)), UInt8, UInt8})
precompile(Tuple{typeof(Base.:(>=)), UInt8, UInt8})
precompile(Tuple{typeof(Printf.base), Type})
precompile(Tuple{Type{NamedTuple{(:modifier,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:modifier,), Tuple{String}}}, Tuple{String}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:modifier,), Tuple{String}}, Symbol})
precompile(Tuple{Type{Dates.Second}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Dates.Second}, Dates.Second})
precompile(Tuple{Type{NamedTuple{(:version,), T} where T<:Tuple}, Tuple{Char}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:version,), Tuple{Char}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:name,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:name,), Tuple{String}}}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:rev, :lt), T} where T<:Tuple}, Tuple{Bool, typeof(Dates.periodisless)}})
precompile(Tuple{Type{Base.Order.Lt{Base.Order.var"#1#3"{typeof(Dates.periodisless), typeof(Base.identity)}}}, Function})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:rev, :lt), Tuple{Bool, typeof(Dates.periodisless)}}, Symbol})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:by,), Tuple{TimeZones.var"#24#25"}}, Symbol})
precompile(Tuple{Type{Base.Order.By{TimeZones.var"#24#25", Base.Order.ForwardOrdering}}, Function, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.log), Memento.Logger, Memento.DefaultRecord})
precompile(Tuple{Memento.var"#level_filter#38"{Memento.Logger}, Memento.DefaultRecord})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(FileWatching.uv_pollcb), Ptr{Nothing}, Int32, Int32})
precompile(Tuple{typeof(Base._uv_hook_close), Base.Timer})
precompile(Tuple{typeof(Base.string), LibPQ.Connection})
precompile(Tuple{typeof(Base.Enums.namemap), Type{LibPQ.libpq_c.ConnStatusType}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, LibPQ.Connection})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, LibPQ.libpq_c.ConnStatusType})
precompile(Tuple{Type{NamedTuple{(:columns,), T} where T<:Tuple}, Tuple{Array{Base.SubString{String}, 1}}})
precompile(Tuple{InvertedIndex.var"#get_table##kw", NamedTuple{(:columns,), Tuple{Array{Base.SubString{String}, 1}}}, typeof(InvertedIndex.get_table), LibPQ.Connection, String})
precompile(Tuple{typeof(Base.string), String, Base.SubString{String}, String, String, Vararg{String}})
precompile(Tuple{typeof(Base.getindex), Array{LibPQ.PQTypeMap, 1}, Int64})
precompile(Tuple{typeof(Base.haskey), LibPQ.PQTypeMap, UInt32})
precompile(Tuple{typeof(Base.getindex), LibPQ.PQTypeMap, UInt32})
precompile(Tuple{typeof(Base.getindex), LayerDicts.LayerDict{Tuple{UInt32, Type}, Union{Function, Type}}, Tuple{UInt32, DataType}})
precompile(Tuple{typeof(Base.getindex), Array{Base.AbstractDict{Tuple{UInt32, Type}, Union{Function, Type}}, 1}, Int64})
precompile(Tuple{typeof(Base.haskey), LibPQ.PQConversions, Tuple{UInt32, DataType}})
precompile(Tuple{typeof(Base.haskey), LibPQ.FallbackConversion, Tuple{UInt32, DataType}})
precompile(Tuple{typeof(Base.getindex), LibPQ.FallbackConversion, Tuple{UInt32, DataType}})
precompile(Tuple{Type{LibPQ.ParseType{Int32}}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Function, Type}, 1}, Function, Int64})
precompile(Tuple{Type{LibPQ.ParseType{String}}})
precompile(Tuple{Type{LibPQ.ParseType{Dates.Date}}})
precompile(Tuple{Type{LibPQ.Column{T, oid, typ, Tresult, Tfunc} where Tfunc<:Union{Function, Type} where Tresult<:(LibPQ.Result{BinaryFormat} where BinaryFormat) where typ where oid where T}, LibPQ.Result{false}, Symbol})
precompile(Tuple{Type{LibPQ.Column{Union{Base.Missing, Int32}, 0x00000017, Int32, LibPQ.Result{false}, LibPQ.ParseType{Int32}}}, LibPQ.Result{false}, Int64, Symbol, Bool, Function})
precompile(Tuple{Type{LibPQ.Column{Union{Base.Missing, String}, 0x00000413, String, LibPQ.Result{false}, LibPQ.ParseType{String}}}, LibPQ.Result{false}, Int64, Symbol, Bool, Function})
precompile(Tuple{Type{LibPQ.Column{Union{Base.Missing, Dates.Date}, 0x0000043a, Dates.Date, LibPQ.Result{false}, LibPQ.ParseType{Dates.Date}}}, LibPQ.Result{false}, Int64, Symbol, Bool, Function})
precompile(Tuple{Type{LibPQ.Column{Union{Base.Missing, String}, 0x00000019, String, LibPQ.Result{false}, LibPQ.ParseType{String}}}, LibPQ.Result{false}, Int64, Symbol, Bool, Function})
precompile(Tuple{typeof(Base.length), LibPQ.Column{Union{Base.Missing, Int32}, 0x00000017, Int32, LibPQ.Result{false}, LibPQ.ParseType{Int32}}})
precompile(Tuple{typeof(Base.length), LibPQ.Column{Union{Base.Missing, String}, 0x00000413, String, LibPQ.Result{false}, LibPQ.ParseType{String}}})
precompile(Tuple{typeof(Base.length), LibPQ.Column{Union{Base.Missing, Dates.Date}, 0x0000043a, Dates.Date, LibPQ.Result{false}, LibPQ.ParseType{Dates.Date}}})
precompile(Tuple{typeof(Base.length), LibPQ.Column{Union{Base.Missing, String}, 0x00000019, String, LibPQ.Result{false}, LibPQ.ParseType{String}}})
precompile(Tuple{typeof(Base.div), Int32, Int32})
precompile(Tuple{typeof(DataFrames._preprocess_column), LibPQ.Column{Union{Base.Missing, Int32}, 0x00000017, Int32, LibPQ.Result{false}, LibPQ.ParseType{Int32}}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, Int32}, 1}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), LibPQ.Column{Union{Base.Missing, String}, 0x00000413, String, LibPQ.Result{false}, LibPQ.ParseType{String}}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Dates.UTD), Int64})
precompile(Tuple{Type{Dates.Date}, Dates.UTInstant{Dates.Day}})
precompile(Tuple{typeof(Dates.default_format), Type{Dates.Date}})
precompile(Tuple{Dates.var"##s884#36", Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Base.push!), Array{Char, 1}, Char})
precompile(Tuple{Type{Base.IteratorSize}, Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Dates.var"#37#38", Tuple{DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType}, Dates.var"#37#38"}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType}, Dates.var"#37#38"}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Vararg{Any}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.HasLength, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.IteratorSize, 1}}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#5#6", Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Dates.var"##s885#33", Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, Dates.var"#34#35"}, Int64})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{typeof(Base.uvfinalize), Base.Timer})
precompile(Tuple{typeof(DataFrames._preprocess_column), LibPQ.Column{Union{Base.Missing, Dates.Date}, 0x0000043a, Dates.Date, LibPQ.Result{false}, LibPQ.ParseType{Dates.Date}}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, Dates.Date}, 1}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), LibPQ.Column{Union{Base.Missing, String}, 0x00000019, String, LibPQ.Result{false}, LibPQ.ParseType{String}}, Int64, Bool})
precompile(Tuple{typeof(Base.firstindex), Array{Union{Base.Missing, Int32}, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{Union{Base.Missing, Dates.Date}, 1}})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, Int32}, 1}})
precompile(Tuple{typeof(Base.close), LibPQ.Result{false}})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(Symbol("size(df)"),), Tuple{Tuple{Int64, Int64}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(Symbol("size(df)"),), Tuple{Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Logging.showvalue), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Pair{Symbol, DataType}})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(Symbol("size(df)"),), Tuple{Tuple{Int64, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Function}, String})
precompile(Tuple{Type{NamedTuple{(:id_col1, :id_col2, :text_col, :tf_method, :idf_method), T} where T<:Tuple}, Tuple{Symbol, Symbol, Symbol, typeof(InvertedIndex.relative_freq), typeof(InvertedIndex.inv_doc_freq_smooth)}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:idf_method,), Tuple{typeof(InvertedIndex.inv_doc_freq_smooth)}}, Symbol})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:tf_method,), Tuple{typeof(InvertedIndex.relative_freq)}}, Symbol})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:fn,), Tuple{typeof(InvertedIndex.relative_freq)}}, Symbol})
precompile(Tuple{InvertedIndex.var"#build_inverted_index##kw", NamedTuple{(:id_col1, :id_col2, :text_col, :tf_method, :idf_method), Tuple{Symbol, Symbol, Symbol, typeof(InvertedIndex.relative_freq), typeof(InvertedIndex.inv_doc_freq_smooth)}}, typeof(InvertedIndex.build_inverted_index), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.eltype), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.ismissing), Tuple{Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.ismissing), Tuple{Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.ismissing), Tuple{Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.ismissing), Tuple{Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.ismissing), Tuple{Array{Union{Base.Missing, String}, 1}}}}}})
precompile(Tuple{typeof(Base.eltype), Array{Union{Base.Missing, Dates.Date}, 1}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Union{Base.Missing, Dates.Date}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Union{Base.Missing, Dates.Date}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.ismissing), Tuple{Array{Union{Base.Missing, Dates.Date}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.ismissing), Tuple{Array{Union{Base.Missing, Dates.Date}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.ismissing), Tuple{Array{Union{Base.Missing, Dates.Date}, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.ismissing), Tuple{Array{Union{Base.Missing, Dates.Date}, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.ismissing), Tuple{Array{Union{Base.Missing, Dates.Date}, 1}}}}}})
precompile(Tuple{typeof(Base.deleteat!), Array{Union{Base.Missing, Int32}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.deleteat!), Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, Dates.Date}, 1}})
precompile(Tuple{typeof(Base.deleteat!), Array{Union{Base.Missing, Dates.Date}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Missings.disallowmissing), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{String, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Missings.disallowmissing), Array{Union{Base.Missing, Dates.Date}, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Dates.Date, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}, String, Array{Dates.Date, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Array{String, 1}, Base.RefValue{String}, Array{Dates.Date, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Array{String, 1}, Base.RefValue{String}, Array{Dates.Date, 1}}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.Date})
precompile(Tuple{Type{NamedTuple{(Symbol("length(doc_ids)"),), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(Symbol("length(doc_ids)"),), Tuple{Int64}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(Symbol("length(doc_ids)"),), Tuple{Int64}}}})
precompile(Tuple{typeof(Logging.showvalue), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(Symbol("length(doc_ids)"),), Tuple{Int64}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.Unicode.lowercase), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.lowercase), Tuple{Array{String, 1}}}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.split), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.lowercase), Tuple{Array{String, 1}}}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.split), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.lowercase), Tuple{Array{String, 1}}}, Base.RefValue{String}}}})
precompile(Tuple{Type{Base.RefValue{T} where T}, InvertedIndex.var"#8#11"})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{InvertedIndex.var"#8#11"}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.split), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.lowercase), Tuple{Array{String, 1}}}, Base.RefValue{String}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.replace), Tuple{Base.RefValue{InvertedIndex.var"#8#11"}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.split), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.lowercase), Tuple{Array{String, 1}}}, Base.RefValue{String}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.replace), Tuple{Base.RefValue{InvertedIndex.var"#8#11"}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.split), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.lowercase), Tuple{Array{String, 1}}}, Base.RefValue{String}}}}}, Function})
precompile(Tuple{Type{Base.RefValue{T} where T}, typeof(Base.join)})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.replace), Tuple{Base.RefValue{InvertedIndex.var"#8#11"}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.split), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.lowercase), Tuple{Array{String, 1}}}, Base.RefValue{String}}}}}, Base.RefValue{typeof(Base.join)}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(|>)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.replace), Tuple{Base.RefValue{InvertedIndex.var"#8#11"}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.split), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.lowercase), Tuple{Array{String, 1}}}, Base.RefValue{String}}}}}, Base.RefValue{typeof(Base.join)}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(|>)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.replace), Tuple{Base.RefValue{InvertedIndex.var"#8#11"}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.split), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.lowercase), Tuple{Array{String, 1}}}, Base.RefValue{String}}}}}, Base.RefValue{typeof(Base.join)}}}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Base.SubString{String}, 1}})
precompile(Tuple{Type{NamedTuple{(Symbol("length(documents)"),), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(Symbol("length(documents)"),), Tuple{Int64}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(Symbol("length(documents)"),), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(Symbol("length(documents)"),), Tuple{Int64}}}, Int64})
precompile(Tuple{typeof(Base.:(|>)), String, typeof(InvertedIndex.sanitize_text)})
precompile(Tuple{PyCall.PyObject, String})
precompile(Tuple{typeof(Base.convert), Type{Array{T, N} where N where T}, PyCall.PyObject})
precompile(Tuple{Type{Array{Any, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(PyCall.py2array), Type, Array{Any, 1}, PyCall.PyObject, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{String}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.:(|>)), Array{String, 1}, typeof(DataStructures.counter)})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(Symbol("length(coll_freq)"),), Tuple{Int64}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(Symbol("length(coll_freq)"),), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(Symbol("length(coll_freq)"),), Tuple{Int64}}}, Int64})
precompile(Tuple{typeof(Base.keys), DataStructures.Accumulator{String, Int64}})
precompile(Tuple{typeof(Base.collect), Base.KeySet{String, Base.Dict{String, Int64}}})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(Symbol("length(terms)"),), Tuple{Int64}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(Symbol("length(terms)"),), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(Symbol("length(terms)"),), Tuple{Int64}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Type{Base.Set{T} where T}}, Type{Base.Set{T} where T}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:fn,), Tuple{typeof(InvertedIndex.inv_doc_freq_smooth)}}, Symbol})
precompile(Tuple{InvertedIndex.var"#build_dictionary_table##kw", NamedTuple{(:idf_method,), Tuple{typeof(InvertedIndex.inv_doc_freq_smooth)}}, typeof(InvertedIndex.build_dictionary_table), DataStructures.Accumulator{String, Int64}, Array{String, 1}, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, InvertedIndex.var"#17#20"{typeof(InvertedIndex.inv_doc_freq_smooth), Array{String, 1}, Base.Dict{String, Int64}}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, InvertedIndex.var"#17#20"{typeof(InvertedIndex.inv_doc_freq_smooth), Array{String, 1}, Base.Dict{String, Int64}}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{Symbol, Array{String, 1}}, Pair{Symbol, Array{Int64, 1}}, Pair{Symbol, Array{Float64, 1}}, Pair{Symbol, Array{Int64, 1}}}})
precompile(Tuple{Type{DataFrames.DataFrame}, Base.Dict{Symbol, Array{T, 1} where T}})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Int64, 1}, Int64, Bool})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{String, 1}, Int64, Bool})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Float64, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.firstindex), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{DataFrames.var"#546#547"{DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{DataFrames.var"#manipulate##kw", NamedTuple{(:copycols, :keeprows, :renamecols), Tuple{Bool, Bool, Bool}}, typeof(DataFrames.manipulate), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}}}}}, Function, Tuple{Tuple{Tuple{Nothing, Nothing}}}, Nothing})
precompile(Tuple{typeof(Base.axes), Tuple})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}}}}}, Function, Tuple{Tuple{Tuple{Nothing, Nothing}}}, Nothing})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{String, 1}}, Base.Val{true}, Nothing, Bool, Nothing})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{String, 1}})
precompile(Tuple{Base.Sort.var"#defalg##kw", NamedTuple{(:alg, :cols), Tuple{Nothing, Symbol}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, Base.Order.Perm{Base.Order.ForwardOrdering, Array{String, 1}}})
precompile(Tuple{typeof(Base.Sort.defalg), DataFrames.DataFrame, Type, Base.Order.Perm{Base.Order.ForwardOrdering, Array{String, 1}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, SortingAlgorithms.TimSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{String, 1}}})
precompile(Tuple{typeof(DataFrames._cycle_permute!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._cycle_permute!), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._cycle_permute!), Array{String, 1}, Array{Int64, 1}})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(Symbol("size(dictionary_table)"),), Tuple{Tuple{Int64, Int64}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(Symbol("size(dictionary_table)"),), Tuple{Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(Symbol("size(dictionary_table)"),), Tuple{Tuple{Int64, Int64}}}}, Int64})
precompile(Tuple{InvertedIndex.var"#build_postings_table##kw", NamedTuple{(:tf_method,), Tuple{typeof(InvertedIndex.relative_freq)}}, typeof(InvertedIndex.build_postings_table), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, DataStructures.Accumulator{T, V} where V<:Number where T}, DataStructures.Accumulator{String, Int64}, String})
precompile(Tuple{typeof(Base.iterate), DataStructures.Accumulator{String, Int64}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{InvertedIndex.var"#tf##kw", NamedTuple{(:fn,), Tuple{typeof(InvertedIndex.relative_freq)}}, typeof(InvertedIndex.tf), String, DataStructures.Accumulator{String, Int64}})
precompile(Tuple{typeof(Base.push!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.iterate), DataStructures.Accumulator{String, Int64}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}}}, Function, Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}, Nothing})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}}}, Function, Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}, Nothing})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{String, 1}, Array{String, 1}}, Base.Val{true}, Nothing, Bool, Nothing})
precompile(Tuple{typeof(Base.deleteat!), Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.deleteat!), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.deleteat!), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Array{Symbol, 1}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.push!), Array{Base.Order.Ordering, 1}, Base.Order.ForwardOrdering})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, DataFrames.DataFrame})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, SortingAlgorithms.TimSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Float64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Float64}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Float64}, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame}, InvertedIndex.var"#9#12"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, InvertedIndex.var"#10#13"{Base.Dict{String, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame}, InvertedIndex.var"#10#13"{Base.Dict{String, Float64}}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Float64}, String})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame}, InvertedIndex.var"#10#13"{Base.Dict{String, Float64}}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Float64, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(Symbol("size(postings_table)"),), Tuple{Tuple{Int64, Int64}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(Symbol("size(postings_table)"),), Tuple{Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(Symbol("size(postings_table)"),), Tuple{Tuple{Int64, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.unique), Array{String, 1}})
precompile(Tuple{Type{DimensionalData.Dimensions.X{T} where T}, Array{String, 1}})
precompile(Tuple{Type{DimensionalData.Dimensions.Y{T} where T}, Array{String, 1}})
precompile(Tuple{typeof(Base.zeros), DimensionalData.Dimensions.X{Array{String, 1}}, DimensionalData.Dimensions.Y{Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:order, :metadata), T} where T<:Tuple}, Tuple{DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}})
precompile(Tuple{Type{NamedTuple{(:order, :metadata), T} where T<:Tuple}, Tuple{DimensionalData.Dimensions.LookupArrays.ForwardOrdered, DimensionalData.Dimensions.LookupArrays.NoMetadata}})
precompile(Tuple{Type{DimensionalData.DimArray{T, N, D, R, A, Na, Me} where Me where Na where A<:AbstractArray{T, N} where R<:Tuple where D<:Tuple where N where T}, Array{Float64, 2}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.ForwardOrdered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Tuple{}, DimensionalData.NoName, DimensionalData.Dimensions.LookupArrays.NoMetadata})
precompile(Tuple{Type{DimensionalData.Dimensions.LookupArrays.At{T, A, R} where R where A where T}, String})
precompile(Tuple{Type{DimensionalData.Dimensions.X{T} where T}, DimensionalData.Dimensions.LookupArrays.At{String, Nothing, Nothing}})
precompile(Tuple{Type{DimensionalData.Dimensions.Y{T} where T}, DimensionalData.Dimensions.LookupArrays.At{String, Nothing, Nothing}})
precompile(Tuple{DimensionalData.Dimensions.var"##s36#10", Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Iterators.enumerate), Core.SimpleVector})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64}})
precompile(Tuple{typeof(Base.findnext), DimensionalData.Dimensions.var"#11#12"{DataType, DataType}, Tuple{DataType, DataType}, Int64})
precompile(Tuple{typeof(DimensionalData.Dimensions.dimsmatch), typeof(Base.:(>:)), Type{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Type{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.At{String, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(DimensionalData.Dimensions.dimsmatch), typeof(Base.:(>:)), Type{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Type{DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.At{String, Nothing, Nothing}}}})
precompile(Tuple{typeof(DimensionalData.Dimensions.dimsmatch), typeof(Base.:(>:)), Type{DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.ForwardOrdered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Type{DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.At{String, Nothing, Nothing}}}})
precompile(Tuple{typeof(DimensionalData.Dimensions._otherdims), Function, Tuple{}, Tuple{}})
precompile(Tuple{typeof(DimensionalData.Dimensions.dimsmatch), typeof(<:), Type{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.At{String, Nothing, Nothing}}}, Type{DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.ForwardOrdered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}})
precompile(Tuple{DimensionalData.Dimensions.var"##s36#55", Any, Any, Any, Any})
precompile(Tuple{typeof(DimensionalData.Dimensions.dims2indices), Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.ForwardOrdered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.At{String, Nothing, Nothing}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.At{String, Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.setindex!), DimensionalData.DimArray{Float64, 2, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.ForwardOrdered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Tuple{}, Array{Float64, 2}, DimensionalData.NoName, DimensionalData.Dimensions.LookupArrays.NoMetadata}, Float64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(Symbol("args[:search_string]"),), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(Symbol("args[:search_string]"),), Tuple{String}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(Symbol("args[:search_string]"),), Tuple{String}}}})
precompile(Tuple{typeof(Logging.showvalue), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(Symbol("args[:search_string]"),), Tuple{String}}}, Int64})
precompile(Tuple{typeof(InvertedIndex.query), String, DimensionalData.DimArray{Float64, 2, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.ForwardOrdered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Tuple{}, Array{Float64, 2}, DimensionalData.NoName, DimensionalData.Dimensions.LookupArrays.NoMetadata}})
precompile(Tuple{PyCall.PyObject, Base.SubString{String}})
precompile(Tuple{typeof(Base.filter), Base.Fix2{typeof(Base.in), DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Array{String, 1}})
precompile(Tuple{typeof(Base.ones), Type{Float64}, Int64})
precompile(Tuple{Type{DimensionalData.Dimensions.LookupArrays.At{T, A, R} where R where A where T}, Array{String, 1}})
precompile(Tuple{Type{DimensionalData.Dimensions.X{T} where T}, DimensionalData.Dimensions.LookupArrays.At{Array{String, 1}, Nothing, Nothing}})
precompile(Tuple{typeof(DimensionalData.Dimensions.dimsmatch), typeof(Base.:(>:)), Type{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Type{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.At{Array{String, 1}, Nothing, Nothing}}}})
precompile(Tuple{typeof(DimensionalData.Dimensions.dimsmatch), typeof(Base.:(>:)), Type{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Type{DimensionalData.Dimensions.Y{Base.Colon}}})
precompile(Tuple{typeof(DimensionalData.Dimensions.dimsmatch), typeof(Base.:(>:)), Type{DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.ForwardOrdered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Type{DimensionalData.Dimensions.Y{Base.Colon}}})
precompile(Tuple{typeof(DimensionalData.Dimensions.dimsmatch), typeof(<:), Type{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.At{Array{String, 1}, Nothing, Nothing}}}, Type{DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.ForwardOrdered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}})
precompile(Tuple{ConstructionBase.var"##s26#2", Any, Any})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_shape), Tuple{}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{Base.var"##s82#216", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:val,), Tuple{String}}}})
precompile(Tuple{ConstructionBase.var"##s26#1", Any, Any, Any})
precompile(Tuple{typeof(DimensionalData.Dimensions.dims2indices), Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.ForwardOrdered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.At{Array{String, 1}, Nothing, Nothing}}, DimensionalData.Dimensions.Y{Base.Colon}}})
precompile(Tuple{typeof(Base.any), Tuple{Bool, Bool}})
precompile(Tuple{typeof(DimensionalData.Dimensions._slicedims), Function, Tuple{}, Tuple{}})
precompile(Tuple{typeof(Base.getindex), DimensionalData.DimArray{Float64, 2, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.ForwardOrdered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Tuple{}, Array{Float64, 2}, DimensionalData.NoName, DimensionalData.Dimensions.LookupArrays.NoMetadata}, Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DimensionalData.DimArray{Float64, 2, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.ForwardOrdered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Tuple{}, Array{Float64, 2}, DimensionalData.NoName, DimensionalData.Dimensions.LookupArrays.NoMetadata}, Base.Colon, Int64})
precompile(Tuple{typeof(LinearAlgebra.dot), Float64, Float64})
precompile(Tuple{typeof(LinearAlgebra.norm), Float64})
precompile(Tuple{typeof(Base.float), Float64})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(LinearAlgebra.norm), typeof(Base.max)}, Type{Float64}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{Base.ComposedFunction{typeof(Base.float), typeof(LinearAlgebra.norm)}, typeof(Base.:(+))}, Type{Float64}})
precompile(Tuple{typeof(Base.argtail), Function, Function, Vararg{Function}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(LinearAlgebra.norm), typeof(Base.min)}, Type{Float64}})
precompile(Tuple{typeof(InvertedIndex.cosine_similarity), Array{Float64, 1}, DimensionalData.DimArray{Float64, 1, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.Unordered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Tuple{DimensionalData.Dimensions.Y{DimensionalData.Dimensions.LookupArrays.Categorical{String, Array{String, 1}, DimensionalData.Dimensions.LookupArrays.ForwardOrdered, DimensionalData.Dimensions.LookupArrays.NoMetadata}}}, Array{Float64, 1}, DimensionalData.NoName, DimensionalData.Dimensions.LookupArrays.NoMetadata}})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{Type{NamedTuple{(Symbol("query(args[:search_string], dvec)"),), T} where T<:Tuple}, Tuple{Tuple{String, Float64}}})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(Symbol("query(args[:search_string], dvec)"),), Tuple{Tuple{String, Float64}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Tuple{String, Float64}, Tuple{Symbol}, NamedTuple{(Symbol("query(args[:search_string], dvec)"),), Tuple{Tuple{String, Float64}}}}})
precompile(Tuple{typeof(Logging.showvalue), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{String, Float64}})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Tuple{String, Float64}, Tuple{Symbol}, NamedTuple{(Symbol("query(args[:search_string], dvec)"),), Tuple{Tuple{String, Float64}}}}, Int64})
precompile(Tuple{typeof(Base._atexit)})
precompile(Tuple{typeof(Base.keys), Base.Dict{Symbol, Base.Timer}})
precompile(Tuple{typeof(PyCall.Py_Finalize)})
precompile(Tuple{Base.var"#886#887"})
precompile(Tuple{LibPQ.var"#10#12"{Base.Threads.Atomic{Bool}, Ptr{Nothing}}, LibPQ.Connection})
precompile(Tuple{typeof(Base.uvfinalize), Base.AsyncCondition})
precompile(Tuple{typeof(Base.uvfinalize), Base.TTY})
